import React, { useState } from 'react';
import { jsPDF } from 'jspdf';
import { Download, Shield, ChevronRight, Info, TrendingUp, TrendingDown, Minus, Globe } from 'lucide-react';
import { Doughnut } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

interface SecurityReportProps {
  score: number;
  findings: Record<string, { 
    status: string; 
    details: string;
    importance?: string;
    recommendations?: string[];
  }>;
  url: string;
  scanDate: string;
  previousScans?: Array<{
    date: string;
    score: number;
  }>;
  industryBenchmark?: {
    average: number;
    percentile: number;
  };
}

export default function SecurityReport({ 
  score, 
  findings, 
  url, 
  scanDate,
  previousScans = [],
  industryBenchmark
}: SecurityReportProps) {
  const [showTrends, setShowTrends] = useState(false);

  const generatePDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    let yPos = 20;

    // Add logo and title
    doc.setFontSize(20);
    doc.setTextColor(10, 36, 99); // #0a2463
    doc.text('Security Assessment Report', pageWidth / 2, yPos, { align: 'center' });

    // Add scan details
    yPos += 20;
    doc.setFontSize(12);
    doc.setTextColor(100, 100, 100);
    doc.text(`URL: ${url}`, 20, yPos);
    yPos += 10;
    doc.text(`Scan Date: ${scanDate}`, 20, yPos);
    yPos += 10;
    doc.text(`Security Score: ${score}/100`, 20, yPos);

    if (industryBenchmark) {
      yPos += 10;
      doc.text(`Industry Average: ${industryBenchmark.average}`, 20, yPos);
      yPos += 10;
      doc.text(`Percentile Ranking: ${industryBenchmark.percentile}th`, 20, yPos);
    }

    // Add findings summary
    yPos += 20;
    doc.setFontSize(14);
    doc.setTextColor(10, 36, 99);
    doc.text('Key Findings', 20, yPos);

    // Add findings list
    yPos += 10;
    doc.setFontSize(12);
    doc.setTextColor(60, 60, 60);
    Object.entries(findings).forEach(([key, finding]) => {
      if (yPos > 250) {
        doc.addPage();
        yPos = 20;
      }
      doc.text(`â€¢ ${key}: ${finding.status}`, 20, yPos);
      yPos += 10;
      
      // Split long descriptions into multiple lines
      const description = doc.splitTextToSize(finding.details, pageWidth - 40);
      description.forEach((line: string) => {
        if (yPos > 250) {
          doc.addPage();
          yPos = 20;
        }
        doc.text(line, 30, yPos);
        yPos += 7;
      });

      // Add recommendations if available
      if (finding.recommendations) {
        yPos += 10;
        doc.text('Recommendations:', 30, yPos);
        finding.recommendations.forEach(rec => {
          yPos += 7;
          if (yPos > 250) {
            doc.addPage();
            yPos = 20;
          }
          doc.text(`- ${rec}`, 35, yPos);
        });
      }
      
      yPos += 10;
    });

    // Add trend data if available
    if (previousScans.length > 0) {
      yPos += 20;
      doc.text('Security Score History', 20, yPos);
      previousScans.forEach(scan => {
        yPos += 10;
        if (yPos > 250) {
          doc.addPage();
          yPos = 20;
        }
        doc.text(`${new Date(scan.date).toLocaleDateString()}: ${scan.score}`, 30, yPos);
      });
    }

    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    const footer = 'Generated by ZaiBai Technology Security Assessment Tool';
    doc.text(footer, pageWidth / 2, 280, { align: 'center' });
    
    // Save the PDF
    doc.save('security-assessment-report.pdf');
  };

  // Calculate statistics
  const stats = {
    pass: Object.values(findings).filter(f => f.status === 'pass').length,
    warning: Object.values(findings).filter(f => f.status === 'warning').length,
    fail: Object.values(findings).filter(f => f.status === 'fail').length
  };

  // Chart data
  const chartData = {
    labels: ['Secure', 'At Risk'],
    datasets: [
      {
        data: [score, 100 - score],
        backgroundColor: [
          score >= 80 ? '#22c55e' : score >= 60 ? '#eab308' : '#ef4444',
          '#e5e7eb'
        ],
        borderWidth: 0
      }
    ]
  };

  const chartOptions = {
    cutout: '70%',
    plugins: {
      legend: {
        display: false
      },
      tooltip: {
        enabled: false
      }
    }
  };

  // Get previous score from actual scan history
  const previousScore = previousScans.length > 1 ? previousScans[previousScans.length - 2].score : undefined;

  const getScoreColor = (value: number) => {
    if (value >= 80) return 'text-green-500';
    if (value >= 60) return 'text-yellow-500';
    return 'text-red-500';
  };

  const getScoreLabel = (value: number) => {
    if (value >= 80) return 'Good';
    if (value >= 60) return 'Average';
    return 'Poor';
  };

  const getTrendIcon = () => {
    if (!previousScore) return null;
    if (score > previousScore) return <TrendingUp className="w-5 h-5 text-green-500" />;
    if (score < previousScore) return <TrendingDown className="w-5 h-5 text-red-500" />;
    return <Minus className="w-5 h-5 text-gray-500" />;
  };

  return (
    <div className="bg-white rounded-lg shadow-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <Shield className="w-6 h-6 text-[#3e92cc]" />
          <h3 className="text-xl font-semibold text-[#0a2463]">Security Report</h3>
        </div>
        <button
          onClick={generatePDF}
          className="flex items-center space-x-2 bg-[#ff8c42] text-white px-4 py-2 rounded-lg hover:bg-[#e67e3b] transition-colors"
        >
          <Download className="w-5 h-5" />
          <span>Download PDF</span>
        </button>
      </div>

      <div className="grid md:grid-cols-2 gap-8 mb-8">
        {/* Score Overview */}
        <div>
          <div className="relative w-48 h-48 mx-auto">
            <Doughnut data={chartData} options={chartOptions} />
            <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-center">
              <div className={`text-3xl font-bold ${getScoreColor(score)}`}>
                {score}
              </div>
              <div className="text-sm text-gray-500">Security Score</div>
            </div>
          </div>
          <div className="text-center mt-4">
            <div className="flex items-center justify-center space-x-2">
              <span className={`text-lg font-semibold ${getScoreColor(score)}`}>
                {getScoreLabel(score)}
              </span>
              {getTrendIcon()}
            </div>
            {previousScore && (
              <div className="text-sm text-gray-500 mt-1">
                Previous: {previousScore} ({score - previousScore > 0 ? '+' : ''}{score - previousScore})
              </div>
            )}
            {industryBenchmark && (
              <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center justify-center space-x-2 mb-2">
                  <Globe className="w-4 h-4 text-[#3e92cc]" />
                  <span className="text-sm font-medium text-gray-700">Industry Comparison</span>
                </div>
                <div className="space-y-2 text-sm">
                  <div>
                    <span className="text-gray-600">Industry Average: </span>
                    <span className="font-medium">{industryBenchmark.average}</span>
                  </div>
                  <div>
                    <span className="text-gray-600">Your Percentile: </span>
                    <span className="font-medium">{industryBenchmark.percentile}th</span>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Statistics */}
        <div className="space-y-6">
          <div>
            <h4 className="text-lg font-semibold text-[#0a2463] mb-4">Findings Summary</h4>
            <div className="space-y-4">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Passed Checks</span>
                <div className="flex items-center">
                  <span className="text-green-500 font-semibold">{stats.pass}</span>
                  <div className="ml-2 w-2 h-2 rounded-full bg-green-500"></div>
                </div>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Warnings</span>
                <div className="flex items-center">
                  <span className="text-yellow-500 font-semibold">{stats.warning}</span>
                  <div className="ml-2 w-2 h-2 rounded-full bg-yellow-500"></div>
                </div>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-gray-600">Failed Checks</span>
                <div className="flex items-center">
                  <span className="text-red-500 font-semibold">{stats.fail}</span>
                  <div className="ml-2 w-2 h-2 rounded-full bg-red-500"></div>
                </div>
              </div>
            </div>
          </div>

          {previousScans.length > 0 && (
            <div>
              <button
                onClick={() => setShowTrends(!showTrends)}
                className="text-[#3e92cc] hover:text-[#0a2463] font-semibold flex items-center"
              >
                View Score Trends
                <ChevronRight className="ml-1 w-4 h-4" />
              </button>
            </div>
          )}
        </div>
      </div>

      {showTrends && previousScans.length > 0 && (
        <div className="mb-8 p-4 bg-gray-50 rounded-lg">
          <h4 className="text-lg font-semibold text-[#0a2463] mb-4">Security Score Trends</h4>
          <div className="space-y-4">
            {previousScans.map((scan, index) => (
              <div key={index} className="flex items-center justify-between">
                <span className="text-gray-600">{new Date(scan.date).toLocaleDateString()}</span>
                <div className="flex-1 mx-4">
                  <div className="h-2 bg-gray-200 rounded-full">
                    <div
                      className="h-2 rounded-full transition-all duration-500"
                      style={{
                        width: `${scan.score}%`,
                        backgroundColor: scan.score >= 80 ? '#22c55e' :
                                      scan.score >= 60 ? '#eab308' : '#ef4444'
                      }}
                    ></div>
                  </div>
                </div>
                <span className={`font-semibold ${getScoreColor(scan.score)}`}>
                  {scan.score}
                </span>
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="bg-blue-50 p-4 rounded-lg">
        <div className="flex items-start space-x-3">
          <Info className="w-5 h-5 text-blue-500 mt-0.5" />
          <div className="text-sm text-blue-700">
            <p className="font-medium mb-1">Next Steps</p>
            <p>
              Review the detailed findings above and implement the recommended security measures.
              Consider scheduling regular security assessments to track your progress and maintain
              a strong security posture.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}